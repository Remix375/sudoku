{"version":3,"sources":["utils/Solve.js","Components/Case/Case.js","Components/Line/Line.js","Components/Board/Board.js","Components/Button/Button.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["backtrack_cond","backtrack_max","square_coordinates","get_row","board","row","get_column","column","col","push","get_square","square","cells","r","c","complete_cell","used","possibilities","p","includes","length","appears_once_only","segment","updated","i","possibility","counter","forEach","cell","Array","isArray","compare","expected","actual","array1","slice","array2","sort","every","value","index","is_solved","valid","q","one_value_cell_constraint","call_backtrack","orig_board","time","backtrack_based","console","log","JSON","parse","stringify","board_2","completed_board","Case","props","onChange","bind","e","target","this","onChangeCase","lineIndex","caseIndex","n","isNaN","parseFloat","parseInt","className","type","min","max","boardData","React","Component","Line","cases","taille","Board","lines","Button","setTime","id","newTime","Infinity","onTimeChange","onClick","onsolve","onreset","App","state","solveState","changeCase","solve","reset","changeTimeToSolve","setState","boardCopy","tboard","solved","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56e49dc7.chunk.js","sourcesContent":["var square_coordinates = [\r\n  [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n  [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n  [1, 1, 1, 2, 2, 2, 3, 3, 3],\r\n  [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n  [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n  [4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n  [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n  [7, 7, 7, 8, 8, 8, 9, 9, 9],\r\n  [7, 7, 7, 8, 8, 8, 9, 9, 9]\r\n]\r\n\r\nfunction get_row(board, row) {\r\n  // Given a board, we can return a single row\r\n  return board[row]\r\n}\r\n\r\nfunction get_column(board, column) {\r\n  // Given a board, we iterate the rows to return a column\r\n  var col = []\r\n  for (let row = 0; row < 9; row++) {\r\n      col.push(board[row][column]);\r\n  }\r\n  return col\r\n}\r\n\r\nfunction get_square(board, square) {\r\n  let cells = []\r\n  for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n          if (square === square_coordinates[r][c]) {\r\n              cells.push(board[r][c])\r\n          }\r\n      }\r\n  }\r\n  return cells\r\n}\r\n\r\n\r\nfunction complete_cell(board, r, c) {\r\n  let used = [...get_row(board, r), ...get_column(board, c), ...get_square(board, square_coordinates[r][c])]\r\n  let possibilities = []\r\n  for (let p = 1; p <= 9; p++) {\r\n      if (!used.includes(p)) {\r\n          possibilities.push(p)\r\n      }\r\n  }\r\n  if (possibilities.length === 1) {\r\n      // If there is only one valid possibility, fill it in\r\n      board[r][c] = possibilities[0]\r\n      return true\r\n  } else {\r\n      board[r][c] = possibilities\r\n      return false\r\n  }\r\n}\r\n\r\nfunction appears_once_only(board, possibilities, segment, r, c) {\r\n  let updated = false\r\n  for (let i = 0; i < possibilities.length; i++) {\r\n      let possibility = possibilities[i]\r\n      let counter = 0\r\n      segment.forEach(cell => {\r\n          if (Array.isArray(cell)) {\r\n              if (cell.includes(possibility)) {\r\n                  counter++\r\n              }\r\n          } else {\r\n              if (cell === possibility) {\r\n                  counter++\r\n              }\r\n          }\r\n      })\r\n      if (counter === 1) {\r\n          board[r][c] = possibility\r\n          updated = true\r\n          break\r\n      }\r\n  }\r\n  return updated\r\n}\r\n\r\nfunction compare(expected, actual) {\r\n  let array1 = expected.slice()\r\n  let array2 = actual.slice()\r\n  return array1.length === array2.length && array1.sort().every(function (value, index) { return value === array2.sort()[index] });\r\n}\r\n\r\nfunction is_solved(board) {\r\n  let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n  let valid = true\r\n  // Check all rows\r\n  for (let r = 0; r < 9 && valid === true; r++) {\r\n      if (!compare(expected, get_row(board, r))) {\r\n          valid = false\r\n      }\r\n  }\r\n  // Check all columns\r\n  for (let c = 0; c < 9 && valid === true; c++) {\r\n      if (!compare(expected, get_column(board, c))) {\r\n          valid = false\r\n      }\r\n  }\r\n  // Check all quadrants\r\n  for (let q = 1; q < 9 && valid === true; q++) {\r\n      if (!compare(expected, get_square(board, q))) {\r\n          valid = false\r\n      }\r\n  }\r\n  return valid\r\n}\r\n\r\n\r\nfunction one_value_cell_constraint(board) {\r\n    let updated = false\r\n    // Convert every gap into an array of possibilities\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (board[r][c] === 0) {\r\n          updated = complete_cell(board, r, c) || updated\r\n        }\r\n      }\r\n    }\r\n    // Look out for any possibility that appears as a possibility\r\n    // once-only in the row, column, or quadrant.\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (Array.isArray(board[r][c])) {\r\n          let possibilities = board[r][c]\r\n          updated = \r\n            appears_once_only(board, possibilities, get_row(board, r), r, c) ||\r\n            appears_once_only(board, possibilities, get_column(board, c), r, c) ||\r\n            appears_once_only(board, possibilities, get_square(board, square_coordinates[r][c]), r, c) || updated\r\n        }\r\n      }\r\n    }\r\n    // Reinitialize gaps back to zero before ending\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (Array.isArray(board[r][c])) {\r\n          board[r][c] = 0\r\n        }\r\n      }\r\n    }\r\n    return updated\r\n}\r\n\r\n\r\n\r\nlet backtrack_cond;\r\nlet backtrack_max;\r\n\r\nfunction call_backtrack(orig_board, time) {\r\n  backtrack_max = time\r\n  backtrack_cond = 0\r\n  const response = backtrack_based(orig_board)\r\n  return response\r\n}\r\n\r\nfunction backtrack_based(orig_board) {\r\n  backtrack_cond+=1;\r\n  console.log(backtrack_cond);\r\n  if (backtrack_cond <= backtrack_max) {\r\n    // Create a temporary board for our recursion.\r\n    let board = JSON.parse(JSON.stringify(orig_board));\r\n    for (let r = 0; r < 9; r++) {\r\n      for (let c = 0; c < 9; c++) {\r\n        if (board[r][c] === 0) {\r\n          complete_cell(board, r, c)\r\n          if (is_solved(board)) return board;\r\n          let cell = board[r][c]\r\n          if (Array.isArray(cell)) {\r\n            for (let i = 0; i < cell.length; i++) {\r\n              // Create a temporary board for each recursion.\r\n              let board_2 = JSON.parse(JSON.stringify(board));\r\n              // Choose a value\r\n              board_2[r][c] = cell[i]\r\n              // Recurse again using new board\r\n              console.log('good')\r\n              let completed_board = backtrack_based(board_2)\r\n              if (completed_board) {\r\n                return completed_board;\r\n              }\r\n            }\r\n            return false // dead end\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\nfunction isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) }\r\n\r\nexport { one_value_cell_constraint, is_solved, isNumber, call_backtrack};","import React from 'react';\r\nimport './Case.css'\r\nimport {isNumber} from '../../utils/Solve'\r\n\r\nclass Case extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    onChange(e) {\r\n        if(e.target.value === ''){\r\n            this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, e.target.value)\r\n        }\r\n        console.log(e.target.value)\r\n        if(isNumber(e.target.value)) {\r\n            const value = parseInt(e.target.value)\r\n            if(value<=9 && value>=1){\r\n                this.props.onChangeCase(this.props.lineIndex, this.props.caseIndex, e.target.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input className='case' type='number' min='1' max='9' onChange={this.onChange} value={(this.props.boardData[this.props.lineIndex][this.props.caseIndex] !== 0) ? this.props.boardData[this.props.lineIndex][this.props.caseIndex] : ''}></input>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Case;","import React from 'react';\r\nimport Case from '../Case/Case'\r\nimport './Line.css'\r\n\r\nclass Line extends React.Component {\r\n    render() {\r\n        let cases = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            cases.push(<th><Case key={i} caseIndex={i} lineIndex={this.props.lineIndex} taille={taille} onChangeCase={this.props.onChangeCase} boardData={this.props.boardData}/></th>)\r\n        }\r\n\r\n        return (\r\n            <div>{cases}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Line;","import React from 'react';\r\nimport Line from '../Line/Line'\r\nimport './Board.css'\r\n\r\nclass Board extends React.Component {\r\n    render() {\r\n        let lines = []\r\n        const taille = this.props.taille\r\n        for(let i=0; i<taille; i++) {\r\n            lines.push(<tr><Line key={i} lineIndex={i} taille={taille} onChangeCase={this.props.onChangeCase} boardData={this.props.boardData}/>{}</tr>)\r\n        }\r\n\r\n        return (\r\n            <table>\r\n                {lines}\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.setTime = this.setTime.bind(this);\r\n    }\r\n\r\n    setTime(e) {\r\n        console.log(e.target.id)\r\n        let newTime = e.target.id === '3' ? Infinity : e.target.id === '1' ? 50000 : 300000;\r\n        this.props.onTimeChange(newTime)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.onsolve} id='solve' className='up'>Solve</button>\r\n                <button id='reset' className='up' onClick={this.props.onreset}>Reset</button>\r\n                <h1>Temp max pour resoudre: {this.props.time === 50000 ? 'rapide' : this.props.time === 300000 ? 'moyen' : 'lent'}</h1>\r\n                <button onClick={this.setTime} id='1'>rapide</button> <button onClick={this.setTime} id='2'>moyen</button> <button onClick={this.setTime} id='3'>lent</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button'\r\nimport './App.css'\r\nimport {one_value_cell_constraint, is_solved, call_backtrack} from '../../utils/Solve'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            taille: 9,\r\n            board:  [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                ],\r\n            time: 300000,\r\n            solveState: ''\r\n        }\r\n        \r\n        this.changeCase = this.changeCase.bind(this);\r\n        this.solve = this.solve.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.changeTimeToSolve = this.changeTimeToSolve.bind(this);\r\n    }\r\n\r\n    changeCase(lineIndex, caseIndex, value) {\r\n        this.setState({\r\n            solveState:''\r\n        })\r\n        const boardCopy = this.state.board;\r\n        boardCopy[lineIndex][caseIndex] = parseInt(value);\r\n        this.setState(\r\n            {\r\n                board: boardCopy\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    reset() {\r\n        this.setState(\r\n           \r\n            {   \r\n                solveState:'',\r\n                board: [\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                ]\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    solve() {\r\n        let tboard = this.state.board\r\n        let updated = true, solved = false\r\n\r\n        while (updated && !solved) {\r\n          updated = one_value_cell_constraint(tboard)\r\n          solved = is_solved(tboard)\r\n        }\r\n        if (!solved) {\r\n            tboard = call_backtrack(tboard, this.state.time)\r\n        }\r\n\r\n        if(!tboard){\r\n            this.setState(\r\n                {solveState: 'Pas reussi a resoudre dans le temps'}\r\n            )\r\n            return\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                solveState: 'reussi ! Voila une solution',\r\n                board: tboard\r\n            }\r\n        )\r\n    }\r\n\r\n    changeTimeToSolve(newTime) {\r\n        console.log(newTime)\r\n        this.setState(\r\n            {time: newTime}\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='wrapper'>\r\n                <h1 id='title'>Sudoku</h1>\r\n                <Board \r\n                    taille={this.state.taille} \r\n                    onChangeCase={this.changeCase}\r\n                    boardData={this.state.board}\r\n                />\r\n                <h1>{this.state.solveState}</h1>\r\n                <Button onsolve={this.solve} onreset={this.reset} onTimeChange={this.changeTimeToSolve} time={this.state.time}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}